var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GeckodriverService_instances, _GeckodriverService_process, _GeckodriverService_options, _GeckodriverService_mapCapabilities, _GeckodriverService_startDriver, _GeckodriverService_stopDriver;
import fsp from 'node:fs/promises';
import fs from 'node:fs';
import path from 'node:path';
import getPort from 'get-port';
import waitPort from 'wait-port';
import logger from '@wdio/logger';
import { start, download } from 'geckodriver';
import { SevereServiceError } from 'webdriverio';
import { isFirefox, getFilePath } from './utils.js';
import { POLL_INTERVAL, POLL_TIMEOUT, LOCAL_OPTIONS, pkg } from './constants.js';
const log = logger('wdio-geckodriver-service');
class GeckodriverService {
    constructor(options, _, config) {
        _GeckodriverService_instances.add(this);
        _GeckodriverService_process.set(this, void 0);
        _GeckodriverService_options.set(this, void 0);
        log.info(`Initiate Geckodriver Service (v${pkg.version})`);
        __classPrivateFieldSet(this, _GeckodriverService_options, {
            outputDir: config.outputDir,
            geckodriverOptions: {
                // set log level if user indicates that they want logs stored
                ...(config.outputDir ? { log: 'debug' } : {}),
                ...options.geckodriverOptions
            },
            ...options
        }, "f");
    }
    onPrepare() {
        return download(__classPrivateFieldGet(this, _GeckodriverService_options, "f").geckodriverOptions?.geckoDriverVersion);
    }
    async beforeSession(_, capabilities, __, cid) {
        /**
         * only start driver if session has gecko as browser defined
         */
        if (!isFirefox(capabilities)) {
            return;
        }
        await __classPrivateFieldGet(this, _GeckodriverService_instances, "m", _GeckodriverService_startDriver).call(this, capabilities, cid);
    }
    afterSession() {
        return __classPrivateFieldGet(this, _GeckodriverService_instances, "m", _GeckodriverService_stopDriver).call(this);
    }
}
_GeckodriverService_process = new WeakMap(), _GeckodriverService_options = new WeakMap(), _GeckodriverService_instances = new WeakSet(), _GeckodriverService_mapCapabilities = function _GeckodriverService_mapCapabilities(capabilities, port) {
    const options = { ...LOCAL_OPTIONS, port };
    if (!capabilities.browserName) {
        for (const cap of Object.values(capabilities)) {
            if (isFirefox(cap.capabilities)) {
                Object.assign(cap, options);
            }
        }
    }
    else if (isFirefox(capabilities)) {
        Object.assign(capabilities, options);
    }
}, _GeckodriverService_startDriver = async function _GeckodriverService_startDriver(capabilities, cid) {
    const port = __classPrivateFieldGet(this, _GeckodriverService_options, "f").geckodriverOptions?.port || await getPort();
    /**
     * update capability connection options to connect to Geckodriver
     */
    __classPrivateFieldGet(this, _GeckodriverService_instances, "m", _GeckodriverService_mapCapabilities).call(this, capabilities, port);
    __classPrivateFieldSet(this, _GeckodriverService_process, await start({ ...__classPrivateFieldGet(this, _GeckodriverService_options, "f").geckodriverOptions, port }), "f");
    log.info(`Geckodriver started for worker ${process.env.WDIO_WORKER_ID} on port ${port} `
        + `with args: ${__classPrivateFieldGet(this, _GeckodriverService_process, "f").spawnargs.join(' ')}`);
    if (__classPrivateFieldGet(this, _GeckodriverService_options, "f").outputDir
        && __classPrivateFieldGet(this, _GeckodriverService_options, "f").geckodriverOptions
        && __classPrivateFieldGet(this, _GeckodriverService_process, "f")
        && __classPrivateFieldGet(this, _GeckodriverService_process, "f").stdout
        && __classPrivateFieldGet(this, _GeckodriverService_process, "f").stderr) {
        const logfileName = typeof __classPrivateFieldGet(this, _GeckodriverService_options, "f").logFileName === 'function'
            ? __classPrivateFieldGet(this, _GeckodriverService_options, "f").logFileName(capabilities, cid)
            : `wdio-geckodriver-service-${cid}.log`;
        const logFile = getFilePath(__classPrivateFieldGet(this, _GeckodriverService_options, "f").outputDir, logfileName);
        await fsp.mkdir(path.dirname(logFile), { recursive: true });
        const logStream = fs.createWriteStream(logFile, { flags: 'w' });
        __classPrivateFieldGet(this, _GeckodriverService_process, "f").stdout.pipe(logStream);
        __classPrivateFieldGet(this, _GeckodriverService_process, "f").stderr.pipe(logStream);
    }
    const { open } = await waitPort({
        timeout: POLL_TIMEOUT,
        interval: POLL_INTERVAL,
        port
    });
    if (!open) {
        throw new SevereServiceError('Geckodriver failed to start.');
    }
    process.on('exit', __classPrivateFieldGet(this, _GeckodriverService_instances, "m", _GeckodriverService_stopDriver).bind(this));
    process.on('SIGINT', __classPrivateFieldGet(this, _GeckodriverService_instances, "m", _GeckodriverService_stopDriver).bind(this));
    process.on('uncaughtException', __classPrivateFieldGet(this, _GeckodriverService_instances, "m", _GeckodriverService_stopDriver).bind(this));
}, _GeckodriverService_stopDriver = function _GeckodriverService_stopDriver() {
    if (__classPrivateFieldGet(this, _GeckodriverService_process, "f")) {
        __classPrivateFieldGet(this, _GeckodriverService_process, "f").kill();
        __classPrivateFieldSet(this, _GeckodriverService_process, undefined, "f");
    }
};
export default GeckodriverService;
//# sourceMappingURL=service.js.map